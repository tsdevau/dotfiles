typeset -U path cdpath fpath manpath

# Apply shell options
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHDMINUS

setopt HIST_FCNTL_LOCK
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_DUPS

# Set any additional environment variables not handled in zshenv
export HISTSIZE="1000000"
export SAVEHIST="1000000"
export HISTFILE="${XDG_STATE_HOME}/zsh_history"
export ZSH_SESSION_FILE="${XDG_STATE_HOME}/zsh_sessions"
export LESSHISTFILE="${XDG_STATE_HOME}/lesshst"

if [[ -f "${XDG_CONFIG_HOME}/env/rfapps.sh" ]]; then
  source "${XDG_CONFIG_HOME}/env/rfapps.sh"
fi

# Build FPATH
if command -v brew >/dev/null 2>&1; then
  FPATH+="$(brew --prefix)/share/zsh/site-functions:$FPATH"
  if [ -f "$(brew --prefix)/bin/orb" ]; then
    source "${HOME}/.orbstack/shell/init.zsh" 2>/dev/null || :
  fi
fi

# Initialize Completions
if [[ ! -d "${XDG_CACHE_HOME}/zsh" ]]; then
  mkdir -m 0750 -p "${XDG_CACHE_HOME}/zsh"
fi
autoload -Uz compinit
compinit -d "${XDG_CACHE_HOME}/zsh/zcompdump"

# Initialize interactive shell commands
if command -v carapace >/dev/null 2>&1; then
  source <(carapace _carapace zsh)
fi

if command -v fzf >/dev/null 2>&1; then
  source <(fzf --zsh)
fi

if command -v op >/dev/null 2>&1; then
  eval "$(op completion zsh)"
  compdef _op op
fi

if command -v zoxide >/dev/null 2>&1; then
  eval "$(zoxide init zsh)"
fi

# Initialize plugins
if [[ -f "${XDG_CONFIG_HOME}/zsh/plugins/fzf-tab/fzf-tab.plugin.zsh" ]]; then
  source "${XDG_CONFIG_HOME}/zsh/plugins/fzf-tab/fzf-tab.plugin.zsh"
fi

if [[ -f "${XDG_CONFIG_HOME}/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
  # source "${XDG_CONFIG_HOME}/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

if [[ -f "${XDG_CONFIG_HOME}/zsh/plugins/code-stats-zsh/codestats.plugin.zsh" ]]; then
  source "${XDG_CONFIG_HOME}/zsh/plugins/code-stats-zsh/codestats.plugin.zsh"
fi

if [[ -f "${XDG_CONFIG_HOME}/zsh/key-bindings.sh" ]]; then
  source "${XDG_CONFIG_HOME}/zsh/key-bindings.sh"
fi

if [[ -f "${XDG_CONFIG_HOME}/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh" ]]; then
  source "${XDG_CONFIG_HOME}/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh"
  bindkey "^[[1;2A" history-substring-search-up
  bindkey "^[[1;2${terminfo[kcuu1]}" history-substring-search-up
  bindkey "^[[1;2B" history-substring-search-down
  bindkey "^[[1;2${terminfo[kcud1]}" history-substring-search-down
fi

# Source ZSH Syntax Highlighting LAST!
if [[ -f "${XDG_CONFIG_HOME}/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
  source "${XDG_CONFIG_HOME}/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  ZSH_HIGHLIGHT_HIGHLIGHTERS+=(main brackets line)
fi

# Terminal emulator width-dependent Starship precmd
precmd() {
  # Ensure the correction for right side prompt indentation is applied
  ZLE_RPROMPT_INDENT=0

  # Select and set the Starship configuration based on terminal width
  STARSHIP_CONFIG=$(
    if [[ $(tput cols) -lt 100 ]]; then
      echo "${XDG_CONFIG_HOME}/starship/starship_compact.toml"
    else
      echo "${XDG_CONFIG_HOME}/starship/starship.toml"
    fi
  )
}

# Initialize Starship shell prompt
eval "$(starship init zsh)"
