{"version":1,"content":"{\"python.json\":\"\\n{\\n    \\\"if\\\": {\\n        \\\"prefix\\\": \\\"if\\\",\\n        \\\"body\\\": [\\\"if ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement\\\"\\n    },\\n    \\\"if/else\\\": {\\n        \\\"prefix\\\": \\\"if/else\\\",\\n        \\\"body\\\": [\\\"if ${1:condition}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement with else\\\"\\n    },\\n    \\\"elif\\\": {\\n        \\\"prefix\\\": \\\"elif\\\",\\n        \\\"body\\\": [\\\"elif ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an elif\\\"\\n    },\\n    \\\"else\\\": {\\n        \\\"prefix\\\": \\\"else\\\",\\n        \\\"body\\\": [\\\"else:\\\", \\\"\\\\t${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an else\\\"\\n    },\\n    \\\"while\\\": {\\n        \\\"prefix\\\": \\\"while\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop\\\"\\n    },\\n    \\\"while/else\\\": {\\n        \\\"prefix\\\": \\\"while/else\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop with else\\\"\\n    },\\n    \\\"for\\\": {\\n        \\\"prefix\\\": \\\"for\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop\\\"\\n    },\\n    \\\"for/else\\\": {\\n        \\\"prefix\\\": \\\"for/else\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\", \\\"else:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop with else\\\"\\n    },\\n    \\\"try/except\\\": {\\n        \\\"prefix\\\": \\\"try/except\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"except ${2:expression} as ${3:identifier}:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/except statement\\\"\\n    },\\n    \\\"try/finally\\\": {\\n        \\\"prefix\\\": \\\"try/finally\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"finally:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/finally statement\\\"\\n    },\\n    \\\"try/except/else\\\": {\\n        \\\"prefix\\\": \\\"try/except/else\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else statement\\\"\\n    },\\n    \\\"try/except/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/finally statement\\\"\\n    },\\n    \\\"try/except/else/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/else/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${6:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else/finally statement\\\"\\n    },\\n    \\\"with\\\": {\\n        \\\"prefix\\\": \\\"with\\\",\\n        \\\"body\\\": [\\\"with ${1:expression} as ${2:target}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a with statement\\\"\\n    },\\n    \\\"def\\\": {\\n        \\\"prefix\\\": \\\"def\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a function definition\\\"\\n    },\\n    \\\"def(class method)\\\": {\\n        \\\"prefix\\\": \\\"def(class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class method\\\"\\n    },\\n    \\\"def(static class method)\\\": {\\n        \\\"prefix\\\": \\\"def(static class method)\\\",\\n        \\\"body\\\": [\\\"@staticmethod\\\", \\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a static class method\\\"\\n    },\\n    \\\"def(abstract class method)\\\": {\\n        \\\"prefix\\\": \\\"def(abstract class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\traise NotImplementedError\\\"],\\n        \\\"description\\\": \\\"Code snippet for an abstract class method\\\"\\n    },\\n    \\\"class\\\": {\\n        \\\"prefix\\\": \\\"class\\\",\\n        \\\"body\\\": [\\\"class ${1:classname}(${2:object}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class definition\\\"\\n    },\\n    \\\"lambda\\\": {\\n        \\\"prefix\\\": \\\"lambda\\\",\\n        \\\"body\\\": [\\\"lambda ${1:parameter_list}: ${2:expression}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a lambda statement\\\"\\n    },\\n    \\\"if(main)\\\": {\\n        \\\"prefix\\\": \\\"__main__\\\",\\n        \\\"body\\\": [\\\"if __name__ == \\\\\\\"__main__\\\\\\\":\\\", \\\"    ${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a `if __name__ == \\\\\\\"__main__\\\\\\\": ...` block\\\"\\n    },\\n    \\\"async/def\\\": {\\n        \\\"prefix\\\": \\\"async/def\\\",\\n        \\\"body\\\": [\\\"async def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async statement\\\"\\n    },\\n    \\\"async/for\\\": {\\n        \\\"prefix\\\": \\\"async/for\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement\\\"\\n    },\\n    \\\"async/for/else\\\": {\\n        \\\"prefix\\\": \\\"async/for/else\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\", \\\"else:\\\", \\\"\\\\t${4:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement with else\\\"\\n    },\\n    \\\"async/with\\\": {\\n        \\\"prefix\\\": \\\"async/with\\\",\\n        \\\"body\\\": [\\\"async with ${1:expr} as ${2:var}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async with statement\\\"\\n    }\\n}\"}"}